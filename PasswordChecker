
import netmiko 
from netmiko import ConnectHandler


import pandas as pd
import getpass
import random
import string
# import smtplib
# import netmiko 
# from netmiko import ConnectHandler
from datetime import date
#import threding 
import sys, time, datetime
from prettytable import PrettyTable
import os
import sys
# import getpass
import platform
# import  socket
import  time 
# from pprint import pprint
# from tkinter import filedialog as fd 
# from tkinter import *
# from queue import Queue
# import threading
import re
# import getpass 
# from configparser import ConfigParser 
from time import sleep 
# from rich.console import Console
# import smtplib
# import mimetypes
# from email.mime.multipart import MIMEMultipart
# from email import encoders
# from email.message import Message
# from email.mime.audio import MIMEAudio
# from email.mime.base import MIMEBase
# from email.mime.image import MIMEImage
# from email.mime.text import MIMEText
# import pandas as pd
# import logging


from win10toast import ToastNotifier



# from tkinter import messagebox

__platform = ((platform.system()))


os.system('cls')


color = {
    'white':    "\033[1;37m",
    'yellow':   "\033[1;33m",
    'green':    "\033[1;32m",
    'blue':     "\033[1;34m",
    'cyan':     "\033[1;36m",
    'red':      "\033[1;31m",
    'magenta':  "\033[1;35m",
    'black':      "\033[1;30m",
    'darkwhite':  "\033[0;37m",
    'darkyellow': "\033[0;33m",
    'darkgreen':  "\033[0;32m",
    'darkblue':   "\033[0;34m",
    'darkcyan':   "\033[0;36m",
    'darkred':    "\033[0;31m",
    'darkmagenta':"\033[0;35m",
    'darkblack':  "\033[0;30m",
    'off':        "\033[0;0m"
}


R = '\033[1;31m'
G = '\033[1;32m'
Y = '\033[1;33m'
C = '\033[1;36m'
W = '\033[1;37m'




CEND      = '\33[0m'
CBOLD     = '\33[1m'
CITALIC   = '\33[3m'
CURL      = '\33[4m'
CBLINK    = '\33[5m'
CBLINK2   = '\33[6m'
CSELECTED = '\33[7m'


CBLACKBG  = '\33[40m'
CREDBG    = '\33[41m'
CGREENBG  = '\33[42m'
CYELLOWBG = '\33[43m'
CBLUEBG   = '\33[44m'
CVIOLETBG = '\33[45m'
CBEIGEBG  = '\33[46m'
CWHITEBG  = '\33[47m'

CGREY    = '\33[90m'
CRED2    = '\33[91m'
CGREEN2  = '\33[92m'
CYELLOW2 = '\33[93m'
CBLUE2   = '\33[94m'
CVIOLET2 = '\33[95m'
CBEIGE2  = '\33[96m'
CWHITE2  = '\33[97m'

CGREYBG    = '\33[100m'
CREDBG2    = '\33[101m'
CGREENBG2  = '\33[102m'
CYELLOWBG2 = '\33[103m'
CBLUEBG2   = '\33[104m'
CVIOLETBG2 = '\33[105m'
CBEIGEBG2  = '\33[106m'
CWHITEBG2  = '\33[107m'

fistlogoclor = "\033[1;37m"
fistlogoclor = "\033[1;34m"

secondlogocolor= "\033[1;94m"
secondlogocolor= "\033[1;94m"

CBLACK  = '\33[30m'
CRED    = '\33[31m'
CGREEN  = '\33[32m'
CYELLOW = '\33[33m'
CBLUE   = '\33[34m'
CVIOLET = '\33[35m'
CBEIGE  = '\33[36m'
CWHITE  = '\33[37m'




# from tkinter import 
from tkinter import filedialog as fd 

def passwordCheker2() : 
	def notification(string) :
		toast = ToastNotifier()
		toast.show_toast(
	    "File Exportation",
	    string,
	 
	    duration = 20,
	    icon_path = "logo.ico",
	    threaded = True,

	)




	def cleardata(file) : 

		Switches = file.readlines()
		devices = [] 
		for i in Switches : 
			i = i.replace("\n","")
			devices.append(i)

		return devices 



	 

	def getFileLocation() :
		init_dir = os.getcwd()
	 
		file = fd.askopenfilename(
		initialfile=f'{init_dir}',
		defaultextension=".xlsx",
		filetypes=[("All Files","*.*"),
		("Excel Documents","*.xlsx	")])

		return file

	 



	def SetupUserPassword() : 

		username   = (input(f'{CRED}[{CWHITE} + {CRED}] {C}  Please Provide your Radius username: '+W)).strip()
		password   = getpass.getpass(prompt=R+f'{CRED}[{CWHITE} + {CRED}] {C}  Please Provide Your Radius Password : ' +C)
		password1  = getpass.getpass(prompt=R+f'{CRED}[{CWHITE} + {CRED}] {C}  Please Confirme Your Radius Password : ' +C)

		while password !=  password1 : 
			print()
			print(f'{CWHITE} [ {CRED}Error {W}]   {CRED}The Provided Password Doesn\'t match') 
			password   = getpass.getpass(prompt=R+f'{CRED} [{CWHITE} + {CRED}] {C}  Please Provide Your Radius Password : ' +C)
			password1  = getpass.getpass(prompt=R+f'{CRED} [{CWHITE} + {CRED}] {C}  Please Confirme Your Radius Password : ' +C)


		
		hprint(f'{W}[ {R}+ {W}]  Credentials has been set [ {G}OK ] ')	
		
		print(username,'length: ',len(username),'password: ',password ,'len',len(password))
		print('\n'*5)
		return username, password 






	def main()  : 

	    exit = False 
	    if __platform =="Windows" : 
	        os.system('cls')
	    else : 
	        os.system('clear')
	    # print(exit
	    # while not exit : 



	    name ="""
                                                     _       \033[1;37m   ____  _                  _
 \033[1;36m _ __    __ _  ___  ___ __      __  ___   _ __   __| | ___  \033[1;37m  / ___|| |__    ___   ___ | | __  ___  _ __
 \033[1;36m| '_ \  / _` |/ __|/ __|\ \ /\ / / / _ \ | '__| / _` |/ __| \033[1;37m | |    | '_ \  / _ \ / __|| |/ / / _ \| '__|
 \033[1;36m| |_) || (_| |\__ \\__ \  \ V  V / | (_) || |   | (_| |\__ \ \033[1;37m | |___ | | | ||  __/| (__ |   < |  __/| |
 \033[1;36m| .__/  \__,_||___/|___/  \_/\_/   \___/ |_|    \__,_||___/ \033[1;37m  \____||_| |_| \___| \___||_|\_\ \___||_|
 \033[1;36m|_|



	    """
	    print(name)
	    hprint(f'                        {C}                             Passwords Checher V 1.0 {W}')                        
	    print('\n'*2)




	def hprint(s , speed=8/5000 ):
	    
	    for c in s + '\n':
	        sys.stdout.write(c)
	        sys.stdout.flush()
	        sleep(speed)

	 

	def checkformissiong(devices,passwords,enablepassword) :
		# global 
		missing= False 


		total_devices = len(devices )
		total_password = len(passwords )
		total_enablepassword= len(enablepassword ) 


		_min = min(total_enablepassword, total_password,total_devices)


		if len(devices) != len(passwords) or len(devices) != len(enablepassword) : 


			if  _min== (total_password) : 
				print(f'{W}[ {R}+ {W}] {R}there some missing lines within the passwords file ')
				print(f'{W}[ {R}+ {W}] {R}Total missing password is : {Y}{total_devices-total_password}')
				missing = True
			elif _min == total_enablepassword: 
				print(f'{W}[ {R}+ {W}] {R}there some missing lines within the enable passwords file ')
				print(f'{W}[ {R}+ {W}] {R}Total missing password is :{Y} {total_devices -total_enablepassword}')
				missing = True 
		return missing




	def extractdata() : 

		
		input(f'{R}[ {CYELLOW2}- {R}]{W} Please tape any key to select your {G}Excel file {W} to check the validity of the passwords: ') 
		file = getFileLocation()


		while not file.lower().endswith(('.xlsx')) : 
			print()
			print(f'{W}[{R} + {W}] {R}Please Select a xlsx file example  {Y}file.xlsx{W}  !!! ')
			print()
			input(f'{R}[ {CYELLOW2}- {R}]{W} Please tape any key to select your {G}Excel file {W} to check the validity of the passwords: ') 
			file = getFileLocation()

			print()
		


		hprint(f'{R}[{W} Selected File {R}] {CBEIGE} {file} {R} [{W} !! {R}]')

		data = pd.read_excel(file,index_col=0)
		data = (data.to_string()).split('\n')

		print('\n'*2)
		lenghthData = len(data)-1 


		line =' Processing the Excel File .....'
		hprint(f'{W}[{G} OK {W}]{Y} {line:<50} {W:<42}[{G} OK {W}]')
		print()
		line = ('Data is Processing ')
		print(f'{W}[{G} OK ] {R} {line} {W}'  ,end="")

		time.sleep(1)
		print('.',end='')
		time.sleep(1)
		print('.',end='')
		time.sleep(1)
		print('.',end='')
		time.sleep(1)
		print(f'.{W:<50}' ,end='')
		hprint(f'{W:<25}[{G} OK {W}]')	
		
		print()

		line=' Total Line Found :'
		hprint(f'{W}[{G} ! {W}]{Y}  {line} {lenghthData:<30} {W:<42}[{G} !! {W}]{Y}')	
		print()

		time.sleep(1)

		line='  Stating the Cheking Process .....'

		hprint(f'{W}[{G} ! {W}]{Y} {line} ')	
		print('\n'*2)


		return	 data






	def startChecking(data): 
		x = PrettyTable()

		x.field_names = ["   NÂ°   ", "        Device         ",  "    STATE     "]
		cpt = 0 
		left = f'[ {G}Connecting{W}  ]' 
		right1 = f'[ {G}  Ok  {W} ]'
		right2 = f'[ {R}Failed{W} ]'
		text = ' Establishing a SSh session to '
		connectedDevices   = []
		unreachableDevices = []


		for i in data[1:]: 
			cpt += 1 
			i = i.split()
			# print(i[1],i[2],i[3])
			print(f'{left:<43} {text:<23} {Y}{i[1]:<28}{W}  ',end='')
			try :

				sshCli = ConnectHandler(
					device_type = 'cisco_ios',
					host = i[1],
					port = 22,
					username =i[2],
					password =  i[3],
					auth_timeout=120,
					timeout = 120)


				print(f'{right1:<30}')
				print()
				connectedDevices.append(i[1])
				x.add_row([cpt, i[1], G+"OK\033[1;37m"])

			# except SSHException: 
			# 	pass 

			
			except Exception as e : 
				# print(e)
				# print(i[1],False )
				print( f'{right2:<30}')
				print()
				unreachableDevices.append(i[1])
				x.add_row([cpt, i[1],R+"NOK\033[1;37m"])

		return	connectedDevices, unreachableDevices,x , cpt 
	# startChecking(data)




	def mainProgram() :


		main()
		data = extractdata()



		starttime = (time.time())

		connectedDevices,unreachableDevices,x , cpt= startChecking(data)

		endtime = (time.time())

		excecutionTime = (float(endtime)-float(starttime))


		total_time= float("%.2f" % excecutionTime)



		m = total_time // 60 

		sec = ( total_time % 60)





		print('\n'*3)
		print(f'{R}[ {CYELLOW2}! {R}]{W} Total Device Checked   : {Y}{cpt }{W} ')
		print()
		print(f'{R}[ {CYELLOW2}! {R}]{W} Total Excecution Time  : {Y}{m} m and {sec:<4} s {W} ')
		print('\n'*3)


		left = f'{R}[ {CYELLOW2}+ {R}]{W}'
		hprint('\n'*5)
		print(f'{R}[ {CYELLOW2}! {R}]{W} You find below a resume for the checking process result  {R}[ {CYELLOW2}! {R}]{W}   ')
		print()
		print()


	

		print( x)

		print()

		 
		print()
		choice = input(f'{left} Do you want to export the unreachable File to a .txt File  [ y/n ] ? :  ') 

		while choice.lower() not in  ['y','n','no','yes'] :
			print(f'{left} {R} Please answer with y [yes] or  n [no] ')  
			choice = input(f'{left} Do you want to export the unreachable Device to a .txt File ?').lower() 

		if choice =="yes" or choice =="y" : 

			with open("UnsucceedDevices.txt","w") as f : 
				for i in unreachableDevices : 
					f.write(i+'\n') 

			notification('The Txt File has been exported ...')
			

		else : 
			pass  




		print('\n'*3)
		input('[ + ] Press any key to quit .... [ + ]')
		print('\n'*5)


	try : 
		mainProgram () 


	except Exception as e : 
		print(e)
		pass 

if __name__ =="__main__"  : 
	print('module impoted succefully ')


