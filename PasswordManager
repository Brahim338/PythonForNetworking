from passwordGenerator import generatePassword    # this the secode program in format of a module we imported here 
from passwordChecker import passwordCheker2 # this the secode program in format of a module we imported here to check the injected passwords
import netmiko 
from netmiko import ConnectHandler

from docx import Document 
from docx.enum.text import WD_ALIGN_PARAGRAPH
document = Document() 
from docx.shared import	Inches	
from docx.shared import Cm
from docx.shared import Pt


import pandas as pd
import getpass
import random
import string
 
from datetime import date
#import threding 
import sys, time, datetime
from prettytable import PrettyTable
import os
import sys
# import getpass
import platform
# import  socket
import  time 
 
import re
 
from time import sleep 
 

# from tkinter import messagebox

__platform = ((platform.system()))



# print()

os.system('cls')


color = {
    'white':    "\033[1;37m",
    'yellow':   "\033[1;33m",
    'green':    "\033[1;32m",
    'blue':     "\033[1;34m",
    'cyan':     "\033[1;36m",
    'red':      "\033[1;31m",
    'magenta':  "\033[1;35m",
    'black':      "\033[1;30m",
    'darkwhite':  "\033[0;37m",
    'darkyellow': "\033[0;33m",
    'darkgreen':  "\033[0;32m",
    'darkblue':   "\033[0;34m",
    'darkcyan':   "\033[0;36m",
    'darkred':    "\033[0;31m",
    'darkmagenta':"\033[0;35m",
    'darkblack':  "\033[0;30m",
    'off':        "\033[0;0m"
}


R = '\033[1;31m'
G = '\033[1;32m'
Y = '\033[1;33m'
C = '\033[1;36m'
W = '\033[1;37m'




CEND      = '\33[0m'
CBOLD     = '\33[1m'
CITALIC   = '\33[3m'
CURL      = '\33[4m'
CBLINK    = '\33[5m'
CBLINK2   = '\33[6m'
CSELECTED = '\33[7m'


CBLACKBG  = '\33[40m'
CREDBG    = '\33[41m'
CGREENBG  = '\33[42m'
CYELLOWBG = '\33[43m'
CBLUEBG   = '\33[44m'
CVIOLETBG = '\33[45m'
CBEIGEBG  = '\33[46m'
CWHITEBG  = '\33[47m'

CGREY    = '\33[90m'
CRED2    = '\33[91m'
CGREEN2  = '\33[92m'
CYELLOW2 = '\33[93m'
CBLUE2   = '\33[94m'
CVIOLET2 = '\33[95m'
CBEIGE2  = '\33[96m'
CWHITE2  = '\33[97m'

CGREYBG    = '\33[100m'
CREDBG2    = '\33[101m'
CGREENBG2  = '\33[102m'
CYELLOWBG2 = '\33[103m'
CBLUEBG2   = '\33[104m'
CVIOLETBG2 = '\33[105m'
CBEIGEBG2  = '\33[106m'
CWHITEBG2  = '\33[107m'

fistlogoclor = "\033[1;37m"
fistlogoclor = "\033[1;34m"

secondlogocolor= "\033[1;94m"
secondlogocolor= "\033[1;94m"

CBLACK  = '\33[30m'
CRED    = '\33[31m'
CGREEN  = '\33[32m'
CYELLOW = '\33[33m'
CBLUE   = '\33[34m'
CVIOLET = '\33[35m'
CBEIGE  = '\33[36m'
CWHITE  = '\33[37m'



# from tkinter import 
from tkinter import filedialog as fd 






def cleardata(file) : 

	# here we gonne read the ip addresses of the devices from the TXT file, so we need to check if there no empty lines 
	Switches = file.readlines()
	devices = [] 
	for i in Switches : 
		i = i.replace("\n","")
		devices.append(i)

	return devices 



 

def getFileLocation() :
	init_dir = os.getcwd()
 
	file = fd.askopenfilename(
	initialfile=f'{init_dir}',
	defaultextension=".txt",
	filetypes=[("All Files","*.*"),
	("Text Documents","*.txt")])

	return file

 



def SetupUserPassword() : 

	username   = (input(f'{CRED}[{CWHITE} + {CRED}] {C}  Please Provide your Radius username: '+W)).strip()
	password   = getpass.getpass(prompt=R+f'{CRED}[{CWHITE} + {CRED}] {C}  Please Provide Your Radius Password : ' +C)
	password1  = getpass.getpass(prompt=R+f'{CRED}[{CWHITE} + {CRED}] {C}  Please Confirme Your Radius Password : ' +C)

	while password !=  password1 : 
		print()
		print(f'{CWHITE} [ {CRED}Error {W}]   {CRED}The Provided Password Doesn\'t match') 
		password   = getpass.getpass(prompt=R+f'{CRED} [{CWHITE} + {CRED}] {C}  Please Provide Your Radius Password : ' +C)
		password1  = getpass.getpass(prompt=R+f'{CRED} [{CWHITE} + {CRED}] {C}  Please Confirme Your Radius Password : ' +C)

		# is this step we need to double that the entred password from the user is correct and match

		
	hprint(f'{W}[ {R}+ {W}]  Credentials has been set [ {G}OK ] ')	
	
	print('\n'*3)
	return username, password 


def make_rows_bold(*rows):
    for row in rows:
        for cell in row.cells:
            for paragraph in cell.paragraphs:
                for run in paragraph.runs:
                    run.font.bold = True

today = date.today()

print(today)

def creatWordFile(data) : 

	try :     # we need this exception the cach any error during the process of the program
 

		
		from datetime import date




		for item in data: 

			pic = document.add_picture('python_icon - Copie.png',width=Inches(1),height=Inches(1))
			pic.alignment = 0
			last_paragraph = document.paragraphs[-1] 
			last_paragraph.alignment = WD_ALIGN_PARAGRAPH.CENTER

			pic.alignment = WD_ALIGN_PARAGRAPH.CENTER

			p = document.add_paragraph() 
			# line = p.add_run("\n")
			# line = p.add_run("\n")
			
			p.alignment = 1


			style = document.styles['Normal']
			font = style.font
			font.name = 'Times New Roman'
			font.size = Pt(14)

			title = p.add_run(('Password Change Sheet\n').upper()) 
			title.bold	 = True 
			title.underline = True 

			title.bold	 = True 

			p = document.add_paragraph() 
	 
			line = p.add_run(('Coffre :  \n').upper()).bold	 = True
			line = p.add_run("\n")

			line1 = p.add_run((f'System : {item[0]} (   {item[-1]}    )\n').upper()).bold	 = True

			line = p.add_run("\n")

			line3 = p.add_run((f'User :  LocalUsername \n').upper()).bold	 = True
			line = p.add_run("\n")



			# title.size = Pt(24)size = Pt(24) 

			table_header = ['Date','Person','New Password','Change raison']



			table = document.add_table(rows=1,cols=4) 
			table.style = 'TableGrid'
			make_rows_bold(table.rows[0])

			table.allow_autofit = False
			for i in range(4) : 
				table.rows[0].cells[i].text = table_header[i]

				# table.rows[0].cells[i].text.bold = True
				# table.rows[0].cells[i].text.bold=True
			 

			cells =table.add_row().cells 
			table.columns[0].width = Inches(2.0)
			table.columns[1].width = Inches(1.0)
			table.columns[2].width = Inches(3.0)
			table.columns[3].width = Inches(3.0)

			password = item[2]

			cells[0].text = str(today)
			cells[1].text = getpass.getuser()
			cells[2].text = password
			cells[3].text = "Periodic passwor Review"

			for i in range(10) : 
				cells =table.add_row().cells 
				# table.rows[i].width = Inches(3.0)
				# cells.height = Inches(2)

			for row in table.rows:
					row.height = Cm(0.8)

			p = document.add_paragraph() 


			line = p.add_run("\n")

			line3 = p.add_run(('Stamp and Signature \n').upper()).bold	 = True
			# line = p.add_run("\n")/


		document.save('passwordChange.docx')
		print('\n' * 3)
		hprint(f'{R}[ {W}+ {R}] {W} The Docx file has been created within in {Y+os.getcwd()}')

	except Exception as e :
		pass 








def statConfiguration(devices,passwords,enablepassword,username,password) : 

	# this is the  function responsile for the depoyment the new user and passwords 
 	
	body=[]
	confugured_devices = [] 
	unconfugured_devices =[]
	cpt = 0 
	for device in devices : 
		

		try : 
			sshCli = ConnectHandler(
			    device_type = 'cisco_ios',
			    host = device,     # estalishing a SSH session to the target device
			    port = 22,
			    username =username,
			    password =  password)

		 
			command  = [f"username LocalUsername privilege 15 secret {passwords[cpt]}",f"enable secret {enablepassword[cpt]}"]
			command = (sshCli.send_config_set(command))
			command = (sshCli.send_config_set("do wr"))  # save the new confiration of the nvram 

			
			hostname =(sshCli.send_config_set(["do show  run | in hostname"])).split('\n')[3]
			hostname = hostname.split()[1]    # return the hostnam configured on the device to match his  ip address 
		 

			# this line of code just the show you which device you work on 
			print(f'{R}[ {G}OK {R}]  {W}start Configuration on :{C}',device,end='')
			print(f'  {R}[ {G}OK {R}]') 
			print()

			# in this example showed here the local username named LocalUsername, for you case you need the Custom the username 
			to_append = [device, 'LocalUsername',passwords[cpt] ,enablepassword[cpt],hostname]

			body.append(to_append)

			# print(command)
			cpt +=1 	

		except Exception as e : 
			# if we had an issue connected to the device, it may the couse for a wrong poassword or username we need to print that on the 
			# screen  

			print(f'{W}[ {R}Failed {W}] {R} can not access to  :',device,end='')
			print(f'{W}  [ {R}Failed {W}]')
			unconfugured_devices.append(device)  # this a list of the unconfigured device it will appear at the end of the program
			to_append=[]
			cpt +=1 	
	



 	# generate the Word File 
	creatWoradFile(body)
	 





	df = pd.DataFrame([body])
	df = pd.DataFrame(body,  
	              columns=['  DEVICE  ', "   username   ","        password       ", "  Enable password  ", "  hostname  " ]) 
	try : 
		df.to_excel('passwords.xlsx')
	except Exception as e : 
		hprint(f'{W}[ {Y}!{W} ] {Y} it seems a Excel File with the same name is open, please close it and try again ....')

	hprint(f'{R}[ {W}+ {R}] {W} The excel file file has been created within in {Y+os.getcwd()}')



	if len(unconfugured_devices) != 0 : 

		hprint('[ + ]                List of the unreachable devices       [ + ]  ')
		
		for i in unconfugured_devices : 
			print()
			hprint(f'[  + ]                      {i}                          [ + ] ')

		with open('unreachableDevices.txt','w') as f : 
			for i in unconfugured_devices : 
				f.write(i+'\n') 


	else : 
		input()




def main()  : 

    exit = False 
    if __platform =="Windows" : 
        os.system('cls')
    else : 
        os.system('clear')
    # print(exit
    # while not exit : 

 

    name = f"""  
 
                                       
 \033[1;36m_ __    __ _  ___  ___ __      __  ___   _ __   __| | \033[1;33m _ __ ___    __ _  _ __    __ _   __ _   ___  _ __
\033[1;36m| '_ \  / _` |/ __|/ __|\ \ /\ / / / _ \ | '__| / _` | \033[1;33m| '_ ` _ \  / _` || '_ \  / _` | / _` | / _ \| '__|
\033[1;36m| |_) || (_| |\__ \\__  \ \ V  V / | (_) || |   | (_| | \033[1;33m| | | | | || (_| || | | || (_| || (_| ||  __/| |
\033[1;36m| .__/  \__,_||___/|___/  \_/\_/   \___/ |_|    \__,_| \033[1;33m|_| |_| |_| \__,_||_| |_| \__,_| \__, | \___||_|
\033[1;36m|_|                                                                                   \033[1;33m  |___/

                                                                                    {C} Passwords Manager V 1.0 {W}
                                                                                    {C} Created by Brahim MELLAL {W}
    """


    print(name)
    # print('')
    # print(f'																				                             ')                        
    # print(f'																				                              ')                        
    print('\n'*2)




def hprint(s , speed=8/5000 ):
    
    for c in s + '\n':
        sys.stdout.write(c)
        sys.stdout.flush()
        sleep(speed)

 

def checkformissiong(devices,passwords,enablepassword) :
	# global 
	missing= False 


	total_devices = len(devices )
	total_password = len(passwords )
	total_enablepassword= len(enablepassword ) 


	_min = min(total_enablepassword, total_password,total_devices)


	if len(devices) != len(passwords) or len(devices) != len(enablepassword) : 


		if  _min== (total_password) : 
			print(f'{W}[ {R}+ {W}] {R}there some missing lines within the passwords file ')
			print(f'{W}[ {R}+ {W}] {R}Total missing password is : {Y}{total_devices-total_password}')
			missing = True
		elif _min == total_enablepassword: 
			print(f'{W}[ {R}+ {W}] {R}there some missing lines within the enable passwords file ')
			print(f'{W}[ {R}+ {W}] {R}Total missing password is :{Y} {total_devices -total_enablepassword}')
			missing = True 
	return missing


# def main_program() :











def startDesployPasswork() : 

	hprint(f'{R}[{W} + {R}]{C} Select the needed files .... {R}[{W} + {R}]{C} ') 
	print()

	input(f'{R}[{W} + {R}]{Y}  Please tape Enter Key ◄────┘    to select the list of the devices you wanna configure ')
	file = getFileLocation()
	devices = open(f'{file}','r')
	hprint(f'{R}[{W} + {R}]{C}  the selected file is : {W+file}')

	print()

	input(f'{R}[{W} + {R}]{Y}  Please tape Enter Key ◄────┘    to select the list of the passwords')
	file = getFileLocation()
	passwords = open(f'{file}','r')
	hprint(f'{R}[{W} + {R}]{C}  the selected file is : {W+file} ')
	print()

	
	input(f'{R}[{W} + {R}]{Y}  Please tape Enter Key ◄────┘   to select the list of the enable passwords')

	file = getFileLocation()
	enablepassword =open(f'{file}','r')
	hprint(f'{R}[{W} + {R}]{C}  the selected file is :{W} {file}')
	print() 

	

	hprint(f'{R}[{W} + {R}]{C}  All the need it files has been selected .... {R}[{W} + {R}]{C} ') 
	print()



	devices = cleardata(devices)
	passwords = cleardata(passwords)
	enablepassword = cleardata(enablepassword)





	# print(min(len(devices),len(passwords),len(enablepassword)))
	hprint(f'{R}[{W} + {R}]{C}  print Check the Validity of the provided files {R}[{G} OK {R}]{C} ') 
	print()
	print()
	hprint(f'{R}[{W} + {R}]{C}  Define the Credentials to access to the devices {R}[{G} OK {R}]{C} ') 

	total_devices = len(devices )
	total_password = len(passwords )
	total_enablepassword= len(enablepassword ) 

# print(total_devices,total_password,total_enablepassword)




	_checkformissiong = checkformissiong(devices, passwords, enablepassword)
	if _checkformissiong : 
		print(f'{Y}[ {R}+ {W}]{Y}  Some Configuration files are missing somelines such as the username\'s passwords or the Enable password{W}') 
		print()
		print(f'{R}[ {W}+ {R}]{C}  Please double check those files and try again ]')
		print() 
		input(f'{R}[ {W}+ {R}]{Y}  Press any key to exit .... ')
		pass 
	else : 

		username,password = SetupUserPassword()

		# print(username, password)
		statConfiguration(devices,passwords,enablepassword,username,password)




	print('\n'*5)

	# print(f'{W}[ {R}! {W}]{C}  Program has been closed for some misconfiguration .... {W}[ {R}! {W}] ' )
	# print(f'{R}[ {W}+{R} ] {W}Preparing Email to be send{R}[ {W}+{R} ] {W}')


# main_program()

# input('[ + ] Press Any Key to quit .....')




def mainMenu() :


	main()
	print()
	hprint(f'{C} Please chose an option from the following : ',1/100)
	print(f'''\n
    


    {R}[ {W}1 {R}]{C} Generate Passwords          {R} [ {W}2 {R}]{C} Change users Passwords   \n                     
    {R}[ {W}3 {R}]{C} Change Enable Password      {R} [ {W}4 {R}]{C} Check The Configured Password  \n 
                                      {R} [ {W}5 {R}]{C} Quit \n 
    		  
        ''')

loop = True 

while loop : 
	mainMenu()

	choice = input(f'{R}  [ {W}+ {R}]{W} Choice :  ')

	while choice not in ["1","2","3","4",'5'] : 
		print(f'  [{R} Failed {W}] {R}Choice not Available, Please choice an option from 1 to 5 ') 
		print()
		choice = input(f'  {R}[ {W}+ {R}]{W} Choice :  ')

	if choice =="1" : 
		generatePassword()
		# pass 

	elif choice =="2" : 
		startDesployPasswork()
		input()

	elif choice =="4" : 
		print('check')
		passwordCheker2()



	elif choice =="5" : 
		loop = False
		print()
		print()
		print(f"{W}[{R} + {W}] {R}      Clossing the Programme  ......!    {W} [{R} + {W}] ")
		time.sleep(1)

  
